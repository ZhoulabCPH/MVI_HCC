######## Figure 4a
library(scRNAtoolVis)
library(ggplot2)
library(ggpubr)
library(Seurat)
library(dplyr)
library(pheatmap)
library(harmony)
Stromal = scdata4[,filter(scdata4@meta.data,celltype2 %in% c('Endo','Mesenchyme')) %>% rownames()]
Stromal = SCTransform(Stromal, vars.to.regress = c("percent.mt", "nFeature_RNA","nCount_RNA")) 

Stromal = RunPCA(Stromal, features = VariableFeatures(Stromal)) 
ElbowPlot(Stromal,ndims = 50)

library(harmony)
Stromal@meta.data[Stromal$orig.ident %in%c('1NT','T1'),'Patient' ] = 'P1'
Stromal@meta.data[Stromal$orig.ident %in%c('NT2','T2'),'Patient' ] = 'P2'
Stromal@meta.data[Stromal$orig.ident %in%c('NT3','T3'),'Patient' ] = 'P3'
Stromal@meta.data[Stromal$orig.ident %in%c('NT4','T4'),'Patient' ] = 'P4'
Stromal@meta.data[Stromal$orig.ident %in%c('NT5','T5'),'Patient' ] = 'P5'

Stromal$MVI = 'MVI'
Stromal@meta.data[Stromal$Patient %in%c('P4','P5'),'MVI' ] = 'Non_MVI'

Stromal = Stromal %>% RunHarmony("Patient", plot_convergence = TRUE,assay.use = "SCT")
Stromal = RunUMAP(Stromal, reduction = "harmony",dims = 1:20)

Stromal = FindNeighbors(Stromal, reduction = "harmony", dims = 1:20)             
Stromal = FindClusters(Stromal, resolution = 0.3,algorithm=1)
Stromal = FindClusters(Stromal, resolution = 0.4,algorithm=1)

Stromal@meta.data[Stromal$seurat_clusters == '0','celltype3'] = 'LSEC'
Stromal@meta.data[Stromal$seurat_clusters == '1','celltype3'] = 'TEC'
Stromal@meta.data[Stromal$seurat_clusters == '2','celltype3'] = 'mCAF'
Stromal@meta.data[Stromal$seurat_clusters == '3','celltype3'] = 'Inflam EC'
Stromal@meta.data[Stromal$seurat_clusters == '4','celltype3'] = 'VSMCs'
Stromal@meta.data[Stromal$seurat_clusters == '5','celltype3'] = 'Arterial_1 EC'
Stromal@meta.data[Stromal$seurat_clusters == '6','celltype3'] = 'Tip-like EC'
Stromal@meta.data[Stromal$seurat_clusters == '7','celltype3'] = 'Cycling EC'
Stromal@meta.data[Stromal$seurat_clusters == '8','celltype3'] = 'Arterial_2 EC'
Stromal@meta.data[Stromal$seurat_clusters == '10','celltype3'] = 'Lymphatic EC'

DimPlot(Stromal, reduction = "umap",group.by = 'celltype3',label = T)+NoLegend()


######## Figure 4b
library(scRNAtoolVis)
jjDotPlot(Stromal,id = 'meta.cluster', dot.col = c("#0E6DAE",'white','#C0293B'),xtree=F,ytree = T,
          gene = c('RGS5','NDUFA4L2','MYH11','TAGLN','PROX1','CCL21','VWA1','PLVAP','IL33','FOSB',
                   'ACKR1','SELP','GJA5','IGFBP3','SULF1','SERPINE2','MKI67','TOP2A','CLEC4G','CLEC1B')  



######## Figure 4c
cor = AverageExpression(Stromal,features = VariableFeatures(Stromal),group.by = 'meta.cluster')
cor = cor$SCT
cor2 = cor(cor)

pheatmap(cor2, border=F,clustering_method  = 'ward',
         color  = colorRampPalette(c('#000015','#5A5AB3','white','#FDBA40','#FF3F00'))(100),
         cluster_cols = T, cluster_rows = T,
         show_rownames = T, show_colnames = T)


######## Figure 4d
library("sscVis")
library("data.table")
library("grid")
library("cowplot")
library("ggrepel")
library("readr")
library("plyr")
library("ggpubr")
library("ggplot2")

Stromal@meta.data[Stromal$orig.ident %in% c('1NT','NT2','NT3'),'MVI'] = 'N_MVI'
Stromal@meta.data[Stromal$orig.ident %in% c('NT4','NT5'),'MVI'] = 'N_Non-MVI'
Stromal@meta.data[Stromal$orig.ident %in% c('T1','T2','T3'),'MVI'] = 'T_MVI'
Stromal@meta.data[Stromal$orig.ident %in% c('T4','T5' ),'MVI'] = 'T_Non-MVI'

names(Stromal@meta.data)[7] = 'loc'
names(Stromal@meta.data)[20] = 'meta.cluster'

Stromal$meta.cluster = Stromal$celltype3

out.prefix <- "E/Fig1"
OR.CD8.list <- do.tissueDist(cellInfo.tb = Stromal@meta.data,
                             out.prefix= sprintf("%s.STARTRAC.dist.T.baseline.CD8",out.prefix),
                             pdf.width=4,pdf.height=6,verbose=1)

bk <- c(seq(-1,1,by=0.01))
color = c(colorRampPalette(colors = c("white","#FDC2BC"))(length(bk)/2),colorRampPalette(colors = c("#FDC2BC","#FC554B"))(length(bk)/2))
pheatmap(OR.CD8.list$OR.dist.mtx,cluster_cols = F,border =F,color  =color,breaks = bk,scale = 'row')



######## Figure 4e
library(Scillus)
table(Stromal$meta.cluster)
Idents(Stromal) = 'meta.cluster'
table(Stromal$meta.cluster)
AEC1_marker = FindMarkers(Stromal,ident.1 = 'Arterial EC',ident.2 = c('Arterial_2 EC'),logfc.threshold = 0)

AEC = Stromal[,filter(Stromal@meta.data,meta.cluster %in% c('Arterial EC','Arterial_2 EC')) %>% rownames()]

AEC = ScaleData(AEC,features = rownames(AEC))
DoHeatmap(AEC,features = c(filter(AEC1_marker,p_val_adj<=0.05 & avg_log2FC >=1 & pct.1 >=0.5) %>% rownames(),
                           filter(AEC1_marker,p_val_adj<=0.05 & avg_log2FC <=1 & pct.2 >=0.5) %>% rownames()))



######## Figure 4f
library(clusterProfiler)
AEC1_marker = filter(AEC1_marker,p_val_adj<=0.05)

up = filter(AEC1_marker,avg_log2FC >= 0.58 & p_val_adj <= 0.05)
res1=bitr(up$SYMBOL,fromType=  "SYMBOL" ,toType="ENTREZID",OrgDb="org.Hs.eg.db") 

kk <- enrichKEGG(res1$ENTREZID, pvalueCutoff = 0.05,qvalueCutoff = 0.05)
up = kk@result[1:10,c('Description','pvalue')]

down = filter(AEC1_marker,avg_log2FC <= -0.58 & p_val_adj <= 0.05)
res1=bitr(down$SYMBOL,fromType=  "SYMBOL" ,toType="ENTREZID",OrgDb="org.Hs.eg.db") 

kk1 <- enrichKEGG(res1$ENTREZID, pvalueCutoff = 0.05,qvalueCutoff = 0.05)
down = kk1@result[1:10,c('Description','pvalue')]

up$Description = factor(up$Description,levels = rev(up$Description))
ggplot(data=up,mapping = aes(x=Description,y=-log10(pvalue)))+geom_bar(stat="identity")+
  theme_bw()+coord_flip()+ylim(0,8)+
  theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())

down$Description = factor(down$Description,levels = rev(down$Description))
ggplot(data=down,mapping = aes(x=Description,y=-log10(pvalue)))+geom_bar(stat="identity")+
  theme_bw()+coord_flip()+ylim(0,4)+
  theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())
p1/p2



######## Figure 4i
library(msigdbr)
library(GSVA)
library(Seurat)
library(readxl)
anno = read_excel('hallmark.xlsx') %>% data.frame()
rownames(anno) = anno$Hallmark.Name
anno = data.frame(row.names = anno$Hallmark.Name,anno$Process.Category)
m_df = msigdbr(species = "Homo sapiens", category = "H") 
msigdbr_list = split(x = m_df$gene_symbol, f = m_df$gs_name)

expr <- as.data.frame(Stromal@assays$SCT@data) 
expr=as.matrix(expr) 
Hall <- gsva(expr, msigdbr_list, kcdf="Gaussian",method = "gsva")


Hall = data.frame(t(Hall))
colnames(Hall) = substring(colnames(Hall),10,)

Hall = Hall[rownames(Stromal@meta.data),]

Hall$celltype = Stromal$meta.cluster

Hall_mean = group_by(Hall, celltype) %>% summarize_each(funs(mean)) %>% data.frame()
rownames(Hall_mean) = Hall_mean$celltype
Hall_mean$celltype = NULL
Hall_mean = data.frame(t(Hall_mean))


rownames(Hall_mean) = gsub("([_])"," ",str_to_title(rownames(Hall_mean)) )  
rownames(anno) = gsub("([_])"," ",str_to_title(rownames(anno)) )  

anno = arrange(anno,anno.Process.Category)

Hall_mean = Hall_mean[rownames(anno),]

pheatmap(Hall_mean , fontsize = 8,
         color  = colorRampPalette(c('#2E80B9','white','#D84234'))(100),scale = 'row',
         border=F,clustering_method = 'ward',
         annotation_row = anno,
         cluster_cols = T, cluster_rows = F,
         show_rownames = T, show_colnames = T)


######## Figure 4j
library(readxl)
library(jjPlot)
growth_factor= read_excel('growth_factor.xlsx')
growth_factor = c(growth_factor$growth_factor)

Stromal = AddModuleScore(Stromal,features = list(c(growth_factor)),name = "growth_factor")

jjplot_vln = Stromal@meta.data[,c('growth_factor')] %>% data.frame()

jjplot_vln$id = Stromal$meta.cluster
jjplot_vln = reshape2::melt(jjplot_vln)
names(jjplot_vln) = c( 'id','gene','exp')
map_df(unique(jjplot_vln$id),function(x){
  tmp <- jjplot_vln %>% filter(id == x)
  map_df(unique(tmp$gene),function(j){
    tmp1 <- tmp %>% filter(gene == j)
    # calculate median expressions
    tmp1$median_exp <- mean(tmp1$exp)
    return(tmp1)
  }) -> res
  return(res)
}) -> jjplot_vln
ggplot(jjplot_vln,aes(x = gene,y = id)) +
  geom_jjviomap(aes(val = exp,fill = median_exp),
                width = 1) +
  scale_fill_gradient(low = 'white',high = '#B92D30') +
  theme_bw(base_size = 14) +
  theme(panel.grid = element_blank(),
        axis.text.x = element_text(angle = 90,hjust = 1,vjust = 0.5)) +
  coord_fixed()


